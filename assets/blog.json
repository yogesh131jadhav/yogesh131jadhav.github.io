[{
    "title": "What is angular",
    "tag": "Angular",
    "details": [
        "#### this is test description ",
        " - test is best",
        " - I love best ",
        " ```Javascript",
        "function callMe() {",
        " console.log('test');",
        "}"
    ]
},{
    "title": "What is angular life cycle",
    "tag": "Angular",
    "details": [
        "#### this is test description ",
        " - test is best",
        " - I love best ",
        " ```Javascript",
        "function callMe() {",
        " console.log('test');",
        "}"
    ]
},{
    "title": "What is react",
    "tag": "React",
    "details": [
        "#### this is test description ",
        " - test is best",
        " - I love best ",
        " ```Javascript",
        "function callMe() {",
        " console.log('test');",
        "}"
    ]
},{
    "title": "Features of Javascript",
    "tag": "Javascript",
    "details": [
        "#### Features",
        "- Javascript support event-driven, functional and imperative programing style",
        "- Allows dynamic typing, run time object creation and variable assignments",
        "- Uses prototype for inheritance and object creation",
        "- Javascript can work both at frontend [Client side] as well as backend [Server side]",
        "- Javascript supports async behaviour using promise, async and await ",
        "- Light weight with minimal setup things to easy and fast bootstraping of application"
    ]
},{
    "title": "Data types in Javascript",
    "tag": "Javascript",
    "details": [
        "#### Two major types",
        "__Primitive Data Type__ [A data type where value will not divide further]",
        "- Number",
        "- String",
        "- Boolean",
        "- undefined",
        "- null",
        "- symbol",
        "\n__Non primitive Data type__ [A data type where values will be having diff data type inside]",
        "- Object",
        "- Array",
        "- Function"
    ]
},{
    "title": "First class function, first order function, high ordered function",
    "tag": "Javascript",
    "details": [
        "#### There are 3 major types of function as below ",
        " - ___First Class Function___ ",
        "   - First class function is a functions which treated as like any other variable ",
        "    - Useful when you need to store, pass or return dynamic function ",
        " - ___First Order Function___ ",
        "   - First order functions are standard functions which didnt accept any function as a argument or not even return any function ",
        "    - Useful for basic operation ",
        " - ___Hight Order Function___ ",
        "   - Correct in reverse manner of first order function, high order function is function which either take function as an argument or return function ",
        "    - Useful for functional programming such as callback, event handling or array transformation ",
        "\n \n \n",
        "<iframe height='300' style='width: 100%;' scrolling='no' title='first class function, first order function and high ordered function' src='https://codepen.io/yogeshjadhav/embed/ByaoBMp?default-tab=js' frameborder='no' loading='lazy' allowtransparency='true' allowfullscreen='true'>See the Pen <a href='https://codepen.io/yogeshjadhav/pen/ByaoBMp'> first class function, first order function and high ordered function</a> by yogesh jadhav (<a href='https://codepen.io/yogeshjadhav'>@yogeshjadhav</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe>",
        "\n \n \n",
        " ```Javascript",
        "\/\/This is First Class Function ",
        "const fun = () => {",
        " console.log('test');",
        " } ",
        " /\/ Here in this example we can see function is set to const variable, which we can call anywhere ",
        " throughout the scope ",
        " ",
        "------------------------------------------------------------------------------------------------------- ",
        "\/\/This is First Order Function ",
        " function callMe() {",
        " console.log('test');",
        " } ",
        " /\/ Just like first class function this function also severs same purpose but having some differences",
        "as you can see",
        " This Function does not assigned to any variable or const",
        " as well as this function not accepting any function as a argument or return any function. It only works",
        "with basic data types  ",
        " ",
        " ------------------------------------------------------------------------------------------------------- ",
        "\/\/This is High Order Function ",
        "function callMe(fun()) {",
        " return fun()",
        " }",
        " /\/ Unlike all above example this function serves a special purpose",
        " Here in Hight order function, function either take function as a argument or return a function or support",
        " both"
    ]
},{
    "title": "Call, apply, bind diff",
    "tag": "Javascript",
    "details": [
        "#### There are 3 major ways to bind this to calling function. All are working same way but with a  little diff which are as below ",
        " - call() ",
        "   - Immediate invoking function ",
        "    - accept arguments individually ",
        " - apply() ",
        "   - Apply is same like call and gets execute immediately ",
        "    - Accepts arguments in an array ",
        " - bind() ",
        "   - On the other hand bind didnt get call immediately. We need to call it separately ",
        "    - The most imp thing is create a new with this bound ",
        "\n \n \n",
        " <iframe height='300' style='width: 100%;' scrolling='no' title='Call(), Apply() and Bind()' src='https://codepen.io/yogeshjadhav/embed/OPJyLmy?default-tab=html%2Cresult' frameborder='no' loading='lazy' allowtransparency='true' allowfullscreen='true'>See the Pen <a href='https://codepen.io/yogeshjadhav/pen/OPJyLmy'>Call(), Apply() and Bind()</a> by yogesh jadhav (<a href='https://codepen.io/yogeshjadhav'>@yogeshjadhav</a>)on <a href='https://codepen.io'>CodePen</a>.</iframe> ",
        "\n \n \n",
        " ```Javascript",
        "\/\/This is call() function ",
        " function greet(greet, punc) {",
        " console.log(greet + ', ' + this.name + punc); ",
        " } ",
        " const person = { name: 'Alice'}; ",
        " greet.call(person, 'Hello', '!');  /\/ O/P- Hello Alice !",
        "------------------------------------------------------------------------------------------------------- ",
        "\/\/This is apply() function ",
        " function greet(greet, punc) {",
        " console.log(greet + ', ' + this.name + punc); ",
        " } ",
        " const person = { name: 'Alice'}; ",
        " greet.apply(person, ['Hello', '!']);  /\/ O/P- Hello Alice !",
        "------------------------------------------------------------------------------------------------------- ",
        "\/\/This is bind() function ",
        " function greet(greet, punc) {",
        " console.log(greet + ', ' + this.name + punc); ",
        " } ",
        " const person = { name: 'Alice'}; ",
        " const boundGreet = greet.bind(person, 'Hey'); ",
        " boundGreet('!!!');  /\/ O/P- Hello Alice ! "
    ]
},{
    "title": "Hoisting",
    "tag": "Javascript",
    "details": []
},{
    "title": "Promise",
    "tag": "Javascript",
    "details": []
},{
    "title": "Async & Await",
    "tag": "Javascript",
    "details": []
},{
    "title": "Closure",
    "tag": "Javascript",
    "details": []
},{
    "title": "Function Declaration & function expression",
    "tag": "Javascript",
    "details": []
},{
    "title": "callback",
    "tag": "Javascript",
    "details": []
},{
    "title": "callback hell",
    "tag": "Javascript",
    "details": []
},{
    "title": "Scope",
    "tag": "Javascript",
    "details": []
},{
    "title": "Event Bubbling",
    "tag": "Javascript",
    "details": []
},{
    "title": "Event Capturing",
    "tag": "Javascript",
    "details": []
},{
    "title": "Package Manager [npm, yarn]",
    "tag": "Javascript",
    "details": []
},{
    "title": "Debounce & Throttle",
    "tag": "Javascript",
    "details": []
},{
    "title": "Web Builder",
    "tag": "Javascript",
    "details": []
},{
    "title": "Template Literals",
    "tag": "Javascript",
    "details": []
},{
    "title": "Deep copy & Shallow copy",
    "tag": "Javascript",
    "details": []
},{
    "title": "Pass by value & pass by reference",
    "tag": "Javascript",
    "details": []
},{
    "title": "Types of errors",
    "tag": "Javascript",
    "details": []
},{
    "title": "Optional Chaining",
    "tag": "Javascript",
    "details": []
},{
    "title": "XSS, CORS",
    "tag": "Javascript",
    "details": []
},{
    "title": "ES versions",
    "tag": "Javascript",
    "details": []
},{
    "title": "Destructuring",
    "tag": "Javascript",
    "details": []
},{
    "title": "Rest & Spread operator",
    "tag": "Javascript",
    "details": []
},{
    "title": "Type coersion",
    "tag": "Javascript",
    "details": []
},{
    "title": "object.freeze()",
    "tag": "Javascript",
    "details": []
},{
    "title": "Modules",
    "tag": "Javascript",
    "details": []
},{
    "title": "Polyphill",
    "tag": "Javascript",
    "details": []
},{
    "title": "ArrayBuffer",
    "tag": "Javascript",
    "details": []
},{
    "title": "event delegation",
    "tag": "Javascript",
    "details": []
},{
    "title": "temporal dead zone",
    "tag": "Javascript",
    "details": []
},{
    "title": "Event Loop",
    "tag": "Javascript",
    "details": []
},{
    "title": "Obfuscator",
    "tag": "Javascript",
    "details": []
},{
    "title": "is Javascript single threaded?",
    "tag": "Javascript",
    "details": []
},{
    "title": "Memoization",
    "tag": "Javascript",
    "details": []
},{
    "title": "Reflow and repaint",
    "tag": "Javascript",
    "details": []
},{
    "title": "weakset and weakmap",
    "tag": "Javascript",
    "details": []
},{
    "title": "Currying",
    "tag": "Javascript",
    "details": []
},{
    "title": "Prototypes",
    "tag": "Javascript",
    "details": []
},{
    "title": "Prototypal inheritance vs classical inheritance",
    "tag": "Javascript",
    "details": []
},{
    "title": "Prototypal & prototype chaining",
    "tag": "Javascript",
    "details": []
},{
    "title": "Generator Function",
    "tag": "Javascript",
    "details": []
},{
    "title": "Heaps",
    "tag": "Javascript",
    "details": []
},{
    "title": "How Javascript executes in browser?",
    "tag": "Javascript",
    "details": []
},{
    "title": "Memory leak",
    "tag": "Javascript",
    "details": []
},{
    "title": "System design",
    "tag": "Javascript",
    "details": []
},{
    "title": "Dependency Injection",
    "tag": "Javascript",
    "details": []
},{
    "title": "Bigint in JS",
    "tag": "Javascript",
    "details": []
},{
    "title": "Dynamic arguments to function",
    "tag": "Javascript",
    "details": []
},{
    "title": "Flatmap vs flat",
    "tag": "Javascript",
    "details": []
},{
    "title": "Preventdefault & Stoppropagation",
    "tag": "Javascript",
    "details": []
},{
    "title": "Webworker, service worker, websocket",
    "tag": "Javascript",
    "details": []
},{
    "title": "Improve performance and security",
    "tag": "Javascript",
    "details": []
},{
    "title": "How to optimize app",
    "tag": "Javascript",
    "details": []
},{
    "title": "Indexed DB",
    "tag": "Javascript",
    "details": []
},{
    "title": "Lazy loading",
    "tag": "Javascript",
    "details": []
},{
    "title": "How to check performance at inspect -> performance at browser",
    "tag": "Javascript",
    "details": []
},{
    "title": "Diff between fetch(), XMLHttpReq",
    "tag": "Javascript",
    "details": []
},{
    "title": "Type of & instance of",
    "tag": "Javascript",
    "details": []
},{
    "title": "Regex",
    "tag": "Javascript",
    "details": []
},{
    "title": "SOLID principal",
    "tag": "Javascript",
    "details": []
},{
    "title": "Web Accessibility (a11y)",
    "tag": "Javascript",
    "details": [
        "Need to follow WCAG guidelines",
        "Need to follow semantic elements",
        "Provide alt text for images",
        "test with screen readers"
    ]
},{
    "title": "Progressive Web Application (PWA)",
    "tag": "Javascript",
    "details": [
        "- Usage modern web technologies to provide fast, reliable and engaging user experience.",
        "- Key features",
        "    - Ability to work offline",
        "    - Receive push notification",
        "    - Access hardware features",
        "    - Improve engaging and performance on mobile devices"
    ]
},{
    "title": "Web performance Metrics",
    "tag": "Javascript",
    "details": [
        "- First contentful paint [FCP]",
        "- Largest Contentful paint [LCP]",
        "- Time to interactive [TTI]",
        "- First Input Delay [FID]",
        "- Speed Index",
        "- Cumulative Layout Shift [CLS]"
        "These metrics help to undrestand load experience, interactivity and visual stability of page"
    ]
},{
    "title": "First contentful paint [FCP]",
    "tag": "Javascript",
    "details": [
        "This metrics measures time from when a page starts loading to when any part of page of the ppages content is rendered on screen.",
        "This could be text, image, svg or any other visible element",
        "### Benefit",
        "- Optimize critical rendering path",
        "- Use efficient caching",
        "- Preload Key Resources",
        "- Minimize server response time",
        "- Reduce third party scripts",
        "- Use modern image formats"
    ]
},{
    "title": "Largest Contentful paint [LCP]",
    "tag": "Javascript",
    "details": []
},{
    "title": "Time to interactive [TTI]",
    "tag": "Javascript",
    "details": []
},{
    "title": "First Input Delay [FID]",
    "tag": "Javascript",
    "details": []
},{
    "title": "Speed Index",
    "tag": "Javascript",
    "details": []
},{
    "title": "Cumulative Layout Shift [CLS]",
    "tag": "Javascript",
    "details": []
},{
    "title": "Security in Frontend application",
    "tag": "Javascript",
    "details": [
        "- Content Security Policy [CSP]",
        "- Sanitize user input to prevent XSS attacks",
        "- use HTTPs for secure connection",
        "- Store sensitive data securely",
        "- Keep dependencies up to date to avoid vulnerabilities"
    ]
},{
    "title": "Javascript OOPs",
    "tag": "Javascript",
    "details": []
},{
    "title": "Cookies, Localstorage, session storage, Indexed DB",
    "tag": "Javascript",
    "details": []
},{
    "title": "Exception Handling",
    "tag": "Javascript",
    "details": []
},{
    "title": "performance.now()",
    "tag": "Javascript",
    "details": []
},{
    "title": "requestAnimationFrame()",
    "tag": "Javascript",
    "details": []
},{
    "title": "Web Workers for multithreading",
    "tag": "Javascript",
    "details": []
},{
    "title": "documentFragment for DOM manipulation",
    "tag": "Javascript",
    "details": []
}]
